{{/* chezmoi:template:line-endings=crlf */}}
<#
    .SYNOPSIS
    PowerShell profile.

    .DESCRIPTION
    This file is a startup script to customize the PowerShell environment and add session-specific elements to every PowerShell session.

    .NOTES
    This profile is designed for Windows only.
#>

param (
    [Parameter()]
    [switch] $NonInteractive
)

#region Define profile variables
# Path to workspace directory
$script:WorkspaceDirectory = "$HOME\Workspace"
# Text editor variables
$script:TextEditor = "code.cmd"  # Visual Studio Code
$script:TextEditorWithWait = "{0} --wait" -f $TextEditor
#endregion

#region Define helper functions
function New-MyAlias {
    # Create a new alias
    param (
        [Parameter(Position = 0)]
        [string] $Name,
        [Parameter(Position = 1)]
        [string] $Command,
        [Parameter(Position = 2)]
        [string] $Description
    )
    New-Alias -Name $Name -Value $Command -Description $Description -ErrorAction Continue -Option ReadOnly -Scope Script -Force
}
function Test-InteractiveSession {
    # Test if the session is interactive
    [Environment]::GetCommandLineArgs() -notcontains "-NonInteractive"
}
function Test-Command {
    # Test if a command is present
    if (Get-Command -Name $args -ErrorAction SilentlyContinue) { $true } else { $false }
}
function Update-EnvPath {
    # Refresh PATH environment variable
    $Separator = [System.IO.Path]::PathSeparator
    $Paths = "Machine", "User" | ForEach-Object -Process {
        [System.Environment]::GetEnvironmentVariable("Path", [System.EnvironmentVariableTarget]::"$_") -split $Separator | Where-Object { $_ } | Select-Object -Unique
    }
    $env:Path = $Paths -join $Separator
}
function Install-MyModules {
    # Install modules from the requirements file
    if (-not (Get-Module -Name PSDepend -ListAvailable)) {
        Install-Module -Name PSDepend -Repository PSGallery
    }
    Import-Module -Name PSDepend
    Invoke-PSDepend -Path "$PSScriptRoot\requirements.psd1" -Install -Import -Force
}
function Invoke-Chezmoi {
    # Wrapper for chezmoi command
    $EditorPrevValue, $env:EDITOR = $env:EDITOR, $TextEditorWithWait
    try { & chezmoi $args }
    finally { $env:EDITOR = $EditorPrevValue }
}
function Invoke-FileExplorer {
    # Browse current location with File Explorer
    & explorer (Get-Location)
}
function Invoke-Editor {
    # Invoke my text editor
    & $TextEditor $args
}
function Set-WorkspaceLocation {
    # Set current location to workspace directory
    if (-not (Test-Path -Path $WorkspaceDirectory -PathType Container)) {
        New-Item -Path $WorkspaceDirectory -ItemType Directory
    }
    Set-Location -Path $WorkspaceDirectory
}
function Enable-History {
    # Enable shell history
    Set-PSReadLineOption -HistorySaveStyle SaveIncrementally
}
function Disable-History {
    # Disable shell history
    Set-PSReadLineOption -HistorySaveStyle SaveNothing
}
function Convert-Base64 {
    param (
        [Parameter(Position = 0, ValueFromPipeline)]
        [string] $String,
        [Parameter()]
        [Alias("d")]
        [switch] $Decode
    )
    if ($Decode.IsPresent) {
        [Text.Encoding]::Utf8.GetString([Convert]::FromBase64String($String))
    }
    else {
        [Convert]::ToBase64String([Text.Encoding]::UTF8.GetBytes($String))
    }
}
#endregion

#region Run in user interactive session
if (Test-InteractiveSession -and -not $NonInteractive.IsPresent) {
    #region Create my core aliases
    New-MyAlias ws      Set-WorkspaceLocation "Change current location to workspace directory"
    New-MyAlias pathUpd Update-EnvPath        "Refresh PATH environment variable"
    New-MyAlias histOn  Enable-History        "Enable shell history"
    New-MyAlias histOff Disable-History       "Disable shell history"
    New-MyAlias base64  Convert-Base64        "Base64 encode and decode"
    New-MyAlias ex      Invoke-FileExplorer   "Execute File Explorer"
    New-MyAlias ed      Invoke-Editor         "Open my text editor"
    #endregion

    #region Set PSFzf module
    # Set PSReadline related options
    Set-PsFzfOption -PSReadlineChordProvider "Ctrl+t"
    Set-PsFzfOption -PSReadlineChordReverseHistory "Ctrl+r"
    # Enable alias
    Set-PsFzfOption -EnableAliasFuzzyScoop
    Set-PsFzfOption -EnableAliasFuzzyEdit
    #endregion

    #region Set PSReadLine module
    # Import module
    Import-Module PSReadLine
    # Set options and key handlers
    Set-PSReadLineOption -PredictionSource HistoryAndPlugin -BellStyle Visual
    Set-PSReadLineKeyHandler -Key Tab -ScriptBlock { Invoke-FzfTabCompletion }
    #endregion

    #region Set my modules
    # Import modules
    Import-Module Portal
    Import-Module MyJavaManager
    # Create aliases
    New-MyAlias portal Open-Portal "Open Portal connection"
    #endregion

    #region Set tools
    # ripgrep/grep
    if (Test-Command "rg") {
        & rg --generate complete-powershell | Out-String | Invoke-Expression
        New-MyAlias grep rg "Execute ripgrep (better grep)"
    } else {
        New-MyAlias grep Select-String "Alias for Select-String Cmdlet"
    }
    # fd/find
    if (Test-Command "fd") {
        New-MyAlias find fd "Execute fd (better find)"
    }
    # bat/cat
    if (Test-Command "bat") {
        New-MyAlias cat bat "Execute bat (better cat)"
    }
    # chezmoi
    if (Test-Command "chezmoi") {
        & chezmoi completion powershell | Out-String | Invoke-Expression
        New-MyAlias chezmoi Invoke-Chezmoi "Execute chezmoi dotfiles manager"
    }
    {{- if .kubernetes }}
    # kubectl
    if (Test-Command "kubectl") {
        $env:KUBE_EDITOR = $TextEditorWithWait
        & kubectl completion powershell | Out-String | Invoke-Expression
        New-MyAlias k kubectl "Execute kubectl Kubernetes command line tool"
    }
    # k9s
    if (Test-Command "k9s") {
        $env:K9S_EDITOR = $TextEditorWithWait
        New-MyAlias k9 k9s "Execute k9s TUI to interact with Kubernetes clusters"
    }
    # kubectx
    if (Test-Command "kubectx") {
        New-MyAlias kctx kubectx "Execute kubectx script to change Kubernetes context"
    }
    # kubens
    if (Test-Command "kubens") {
        New-MyAlias kns kubens "Execute kubens script to change Kubernetes namespace"
    }
    {{- end }}
    #endregion

    #region Set custom prompt
    # Import modules
    Import-Module posh-git
    Import-Module Terminal-Icons
    # Initialize Starship
    $env:STARSHIP_CONFIG = "$env:APPDATA\starship\starship.toml"
    $env:STARSHIP_CACHE = $env:TEMP
    Invoke-Expression (& starship init powershell)
    #endregion

    #region Set MOTD
    # Print greeting message like in the movie "WarGames"
    Write-Host ("`nGREETINGS PROFESSOR {{ .firstname | upper }}.`n`nSHALL WE PLAY A GAME?`n") -ForegroundColor Yellow
    #endregion
}
#endregion
